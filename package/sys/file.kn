+enum Origin
	head
	cur
	tail
end enum

+class Reader()
	*func [d0000.knd, _readerDtor, _force] _dtor()
	end func

	+func [d0000.knd, _readerFin] fin()
	end func

	+func [d0000.knd, _readerSetPos] setPos(origin: @Origin, pos: int)
	end func

	+func [d0000.knd, _readerGetPos] getPos(): int
	end func

	+func [d0000.knd, _readerDelimiter] delimiter(delimiters: []char)
	end func

	+func [d0000.knd, _readerRead] read(size: int): []bit8
	end func

	+func [d0000.knd, _readerReadLetter] readLetter(): char
	end func

	+func [d0000.knd, _readerReadInt] readInt(): int
	end func

	+func [d0000.knd, _readerReadFloat] readFloat(): float
	end func

	+func [d0000.knd, _readerReadChar] readChar(): char
	end func

	+func [d0000.knd, _readerReadStr] readStr(): []char
	end func

	+func [d0000.knd, _readerReadLine] readLine(): []char
	end func

	+func [d0000.knd, _readerFileSize] fileSize(): int
	end func

	+func [d0000.knd, _readerTerm] term(): bool
	end func

	var handle: int
	var delimiterNum: int
	var delimiters: int
	var fileSize_: int
end class

+class Writer()
	*func [d0000.knd, _writerDtor, _force] _dtor()
	end func

	+func [d0000.knd, _writerFin] fin()
	end func

	+func [d0000.knd, _writerSetPos] setPos(origin: @Origin, pos: int)
	end func

	+func [d0000.knd, _writerGetPos] getPos(): int
	end func

	+func [d0000.knd, _writerWrite] write(bin: []bit8)
	end func

	+func [d0000.knd, _writerWriteInt] writeInt(n: int)
	end func

	+func [d0000.knd, _writerWriteFloat] writeFloat(n: float)
	end func

	+func [d0000.knd, _writerWriteChar] writeChar(n: char)
	end func

	+func [d0000.knd, _writerWriteStr] writeStr(n: []char)
	end func

	+func [d0000.knd, _writerFlush] flush()
	end func

	var handle: int
end class

+func [d0000.knd, _makeReader, _make_instance] makeReader(me2: @Reader, path: []char): @Reader
end func

+func [d0000.knd, _makeWriter, _make_instance] makeWriter(me2: @Writer, path: []char, append: bool): @Writer
end func

+enum SysDir
	desktop :: 0x00
	fonts :: 0x14
	appData :: 0x1A
	windows :: 0x24
	system32 :: 0x25
	programFiles :: 0x26
end enum

+func [d0000.knd, _makeDir] makeDir(path: []char): bool
end func

+func [d0000.knd, _forEachDir] forEach(path: []char, recursion: bool, callback: func<([]char, bool, kuin@Class): bool>, data: kuin@Class): bool
end func

+func [d0000.knd, _existPath] exist(path: []char): bool
end func

+func [d0000.knd, _delDir] delDir(path: []char): bool
end func

+func [d0000.knd, _delFile] delFile(path: []char): bool
end func

+func [d0000.knd, _copyDir] copyDir(dst: []char, src: []char): bool
end func

+func [d0000.knd, _copyFile] copyFile(dst: []char, src: []char): bool
end func

+func [d0000.knd, _moveDir] moveDir(dst: []char, src: []char): bool
end func

+func [d0000.knd, _moveFile] moveFile(dst: []char, src: []char): bool
end func

+func [d0000.knd, _dir] dir(path: []char): []char
end func

+func [d0000.knd, _ext] ext(path: []char): []char
end func

+func [d0000.knd, _fileName] fileName(path: []char): []char
end func

+func [d0000.knd, _fullPath] fullPath(path: []char): []char
end func

+func [d0000.knd, _delExt] delExt(path: []char): []char
end func

+func [d0000.knd, _sysDir] sysDir(kind: @SysDir): []char
end func

+func [d0000.knd, _exeDir] exeDir(): []char
end func

+func [d0000.knd, _fileSize] fileSize(path: []char): int
end func

+func [d0000.knd, _setCurDir] setCurDir(path: []char)
end func

+func [d0000.knd, _getCurDir] getCurDir(): []char
end func
