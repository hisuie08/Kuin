+class Process()
	*func [d0000.knd, _processDtor, _force] _dtor()
	end func

	+func [d0000.knd, _processRun] run(waitUntilExit: bool): int
	end func

	+func [d0000.knd, _processFin] fin()
	end func

	+func [d0000.knd, _processRunning] running(exitCode: &int): bool
	end func

	+func [d0000.knd, _processReadPipe] readPipe(): []char
	end func

	var processHandle: int
	var threadHandle: int
	var readPipeHandle: int
	var writePipeHandle: int
end class

+func [d0000.knd, _makeProcess, _make_instance] makeProcess(me2: @Process, path: []char, cmdLine: []char): @Process
end func

+func [d0000.knd, _taskOpen] open(path: []char)
end func

+class Thread()
	*func [d0000.knd, _threadDtor, _force] _dtor()
	end func

	+func [d0000.knd, _threadRun] run()
	end func

	+func [d0000.knd, _threadRunning] running(): bool
	end func

	var threadHandle: int
	var begin: bool
end class

{
+func [d0000.knd, _makeThread, _make_instance] makeThread(me2: @Thread, threadFunc: func<()>): @Thread
end func
}

+class Mutex()
	*func [d0000.knd, _mutexDtor, _force] _dtor()
	end func

	+func [d0000.knd, _mutexLock] lock()
	end func

	+func [d0000.knd, _mutexTryLock] tryLock(): bool
	end func

	+func [d0000.knd, _mutexUnlock] unlock()
	end func

	var criticalSection: int
end class

{
+func [d0000.knd, _makeMutex, _make_instance] makeMutex(me2: @Mutex): @Mutex
end func
}
