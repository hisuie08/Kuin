func main()
	block
		var rndArray: []int :: lib@countUp(0, 1000)
		do rndArray.shuffle()
		var rndArray2: []int :: lib@countUp(0, 1000)
		do rndArray2.shuffle()
		var d: dict<[]char, []char> :: #dict<[]char, []char>
		for(0, 2)
			for i(0, ^rndArray - 1)
				do d.add(rndArray[i].toStr(), (rndArray[i] * 2).toStr())
			end for
			do cui@print((^d).toStr())
			for i(0, ^rndArray - 1)
				if(d.get(rndArray[i].toStr(), &) <> (rndArray[i] * 2).toStr())
					do cui@print("False: \{rndArray[i]}, \{d.get(rndArray[i].toStr(), &)}")
				end if
			end for

			for i(0, ^rndArray2 - 1)
				do d.del(rndArray2[i].toStr())
			end for
			do cui@print((^d).toStr())

			for i(0, ^rndArray - 1)
				if(d.get(rndArray[i].toStr(), &) <>& null)
					do cui@print("False: \{rndArray[i]}, \{d.get(rndArray[i].toStr(), &)}")
				end if
			end for
		end for
	end block

	{
	block
		var sql: sql@Sql :: sql@makeSql("test.db")
		do cui@print(sql.exec("create table item(id INTEGER, name TEXT)").toStr())
		do cui@print(sql.exec("insert into item values (100, 'Apple')").toStr())
		do cui@print(sql.exec("insert into item values (200, 'Orange')").toStr())
		do cui@print(sql.exec("select * from item").toStr())
		do cui@print(sql.getInt(0).toStr())
		do cui@print(sql.getStr(1).toStr())
		do cui@print(sql.next().toStr())
		do cui@print(sql.getInt(0).toStr())
		do cui@print(sql.getStr(1).toStr())
		do cui@print(sql.next().toStr())
		do sql.fin()
		do file@delFile("test.db")
	end block
	}

	block
		var existed: bool
		do cui@print("123".toInt(&existed).toStr())
		do cui@print(existed.toStr())
		do cui@print("abc".toInt(&existed).toStr())
		do cui@print(existed.toStr())
		do cui@print("10.5".toFloat(&existed).toStr())
		do cui@print(existed.toStr())
		do cui@print("abc".toFloat(&existed).toStr())
		do cui@print(existed.toStr())
	end block
end func
